package com.bdqn.spz.hibernate.dao.impl;

import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.junit.Test;

import com.bdqn.spz.hibernate.entity.Grade;
import com.bdqn.spz.hibernate.entity.Student;
import com.bdqn.spz.hibernate.entity.Teacher;
import com.bdqn.spz.hibernate.util.HibernateUtil;

/**
 * Dao层学生实现类
 * 
 * @author 施鹏振
 *
 */
public class StudentDaoImpl {

	private static Session session = HibernateUtil.currentSession();

	// 动态hql，通过学号/姓名和密码查询学生信息
	@SuppressWarnings("unchecked")
	public void findStudent(Student student) {
		/*
		 * Student student=new Student(); student.setStudentName("郭靖");
		 * student.setLoginPwd("GuoJing");
		 */
		StringBuilder hql = new StringBuilder("from Student where 1=1");
		if (student.getStudentNo() != null) {
			hql.append(" and studentNo=:studentNo");
		} else if (student.getStudentName() != null && !student.getStudentName().equals("")) {
			hql.append(" and studentName=:studentName");
		}
		hql.append(" and loginPwd=:loginPwd");
		Query query = session.createQuery(hql.toString());
		query.setProperties(student);
		for (Student student2 : (List<Student>) query.list()) {
			System.out.println(student2.getStudentName());
		}
	}

	// 记录总数
	@Test
	public Integer totalCount() {
		String hql = "select count(*) from Student";
		Query query = session.createQuery(hql);
		
		return (Integer) query.uniqueResult();
	}

	// 分页查询
	@SuppressWarnings("unchecked")
	public void findStudents() {
		String hql = "from Student";
		Query query = session.createQuery(hql);
		for (Student student : (List<Student>) query.setFirstResult((1 - 1) * 3).setMaxResults(3).list()) {
			System.out.println("学号 ->" + student.getStudentNo());
			System.out.println("学生姓名 ->" + student.getStudentName());
			System.out.println("年级名称 ->" + student.getGrade().getGradeName());
			List<Teacher> teachers = student.getTeachers();
			System.out.println("教师数量 ->" + teachers.size());
			for (Teacher teacher : teachers) {
				System.out.println("教师名称 ->" + teacher.getTeacherName());
			}
			System.out.println("-------------------------------");
		}
	}

	// 使用内连接查询(返回List<Object[]>)
	@SuppressWarnings("unchecked")
	public void findStudents2() {
		String hql = "from Student stu inner join stu.grade";
		Query query = session.createQuery(hql);
		for (Object[] student : (List<Object[]>) query.list()) {
			System.out.println("学号 ->" + ((Student) student[0]).getStudentNo());
			System.out.println("学生姓名 ->" + ((Student) student[0]).getStudentName());
			System.out.println("年级名称 ->" + ((Student) student[0]).getGrade().getGradeName());
			List<Teacher> teachers = ((Student) student[0]).getTeachers();
			System.out.println("教师数量 ->" + teachers.size());
			for (Teacher teacher : teachers) {
				System.out.println("教师名称 ->" + teacher.getTeacherName());
			}
			System.out.println("-------------------------------");
		}
	}

	// 使用迫切内连接查询(返回List<Object>)
	@SuppressWarnings("unchecked")
	public void findStudents3() {
		String hql = "from Student stu inner join fetch stu.grade";
		// hql = "select distinct stu from Student stu inner join fetch
		// stu.grade";
		Query query = session.createQuery(hql);
		for (Student student : (List<Student>) query.list()) {
			System.out.println("学号 ->" + student.getStudentNo());
			System.out.println("学生姓名 ->" + student.getStudentName());
			System.out.println("年级名称 ->" + student.getGrade().getGradeName());
			List<Teacher> teachers = student.getTeachers();
			System.out.println("教师数量 ->" + teachers.size());
			for (Teacher teacher : teachers) {
				System.out.println("教师名称 ->" + teacher.getTeacherName());
			}
			System.out.println("-------------------------------");
		}
	}

	// 使用迫切左外连接查询(返回List<Object>)
	@SuppressWarnings("unchecked")
	public void findStudents4() {
		String hql = "from Student stu left outer join fetch stu.grade";// outer可有可无
		// hql="select distinct stu from Student stu left outer join fetch
		// stu.grade";
		Query query = session.createQuery(hql);
		for (Student student : (List<Student>) query.list()) {
			System.out.println("学号 ->" + student.getStudentNo());
			System.out.println("学生姓名 ->" + student.getStudentName());
			System.out.println("年级名称 ->" + student.getGrade().getGradeName());
			List<Teacher> teachers = student.getTeachers();
			System.out.println("教师数量 ->" + teachers.size());
			for (Teacher teacher : teachers) {
				System.out.println("教师名称 ->" + teacher.getTeacherName());
			}
			System.out.println("-------------------------------");
		}
	}

	// 使用迫切右外连接查询(返回List<Object>)
	@SuppressWarnings("unchecked")
	public void findStudents5() {
		String hql = "from Student stu right outer join fetch stu.grade";// outer可有可无
		// hql="select distinct stu from Student stu right outer join fetch
		// stu.grade";
		Query query = session.createQuery(hql);
		for (Student student : (List<Student>) query.list()) {
			System.out.println("学号 ->" + student.getStudentNo());
			System.out.println("学生姓名 ->" + student.getStudentName());
			System.out.println("年级名称 ->" + student.getGrade().getGradeName());
			List<Teacher> teachers = student.getTeachers();
			System.out.println("教师数量 ->" + teachers.size());
			for (Teacher teacher : teachers) {
				System.out.println("教师名称 ->" + teacher.getTeacherName());
			}
			System.out.println("-------------------------------");
		}
	}

	// 使用等值连接查询(返回List<Object[]>)
	@SuppressWarnings("unchecked")
	public void findStudents6() {
		String hql = "from Student stu,Grade g where stu.grade=g";
		Query query = session.createQuery(hql);
		List<Object[]> list = query.list();
		System.out.println(list.size());
		for (Object[] student : list) {
			System.out.println("学号 ->" + ((Student) student[0]).getStudentNo());
			System.out.println("学生姓名 ->" + ((Student) student[0]).getStudentName());
			System.out.println("年级名称 ->" + ((Student) student[0]).getGrade().getGradeName());
			List<Teacher> teachers = ((Student) student[0]).getTeachers();
			System.out.println("教师数量 ->" + teachers.size());
			for (Teacher teacher : teachers) {
				System.out.println("教师名称 ->" + teacher.getTeacherName());
			}
			System.out.println("-------------------------------");
		}
	}

	// 使用隐式内连接(返回List<Object>)
	@SuppressWarnings("unchecked")
	public void findStudents7() {
		String hql = "from Student stu where stu.grade.gradeName=?";
		Query query = session.createQuery(hql);
		query.setString(0, "S1");
		List<Student> list = query.list();
		System.out.println(list.size());
		for (Student student : list) {
			System.out.println("学号 ->" + student.getStudentNo());
			System.out.println("学生姓名 ->" + student.getStudentName());
			System.out.println("年级名称 ->" + student.getGrade().getGradeName());
			List<Teacher> teachers = student.getTeachers();
			System.out.println("教师数量 ->" + teachers.size());
			for (Teacher teacher : teachers) {
				System.out.println("教师名称 ->" + teacher.getTeacherName());
			}
			System.out.println("-------------------------------");
		}
	}

	// 使用等值连接查询(返回List<Object[]>)
	@SuppressWarnings("unchecked")
	public void findStudents8() {
		String hql = "select stu.studentName,stu.grade from Student stu";
		Query query = session.createQuery(hql);
		List<Object[]> list = query.list();
		System.out.println(list.size());
		for (Object[] student : list) {
			System.out.println("学生姓名 ->"+student[0]);
			System.out.println("年级名称 ->"+((Grade)student[1]).getGradeName());
			System.out.println("-------------------------------");
		}
	}

	public static void main(String[] args) {

		Transaction transaction = session.beginTransaction();
		new StudentDaoImpl().totalCount();
		transaction.commit();
	}
}
